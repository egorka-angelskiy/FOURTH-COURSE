http://homelisp.ru/help/classic_funct.html
https://lisp-lang.org/learn/getting-started/



;1. Напишите функцию, вычисляющую предпоследний элемент списка.
(defun prelast(a)
	(
		cadr (reverse a)
	)
)
(format nil "Список -> ~a~%Предпоследний элемент -> ~a" (list 34 657 23 56 0 325 15) (prelast `(34 657 23 56 0 325 15)))


;2. Напишите функцию (fullength х), считающую полное количество атомов (не
;равных nil) в списке х. Исходный список может быть многоуровневым.
(defun fullength (x)
    (
		cond
		((null x) 0)
		((atom x) 1)
		(t
			(+
				(fullength (car x))
				(fullength (cdr x))
			)
		)
	)
)


(format nil "Cписок - ~a~%Длина списка = ~a" (list 234 4 nil 34) (fullength `(234 4 nil 34)))




;3. Напишите функцию от двух аргументов х и n , 
;которая создает список из n раз повторенных списков, состоящих из одного элемента х.
(defun func(x n)
	(
		cond 
			(
				(> n 0) 
				(cons 
					(list x) 
					(func x (- n 1))
				)
			)
	)
)

(format nil "Элемент x = 5~%Кол-во посторений n = 10~%Полученный список - ~a" (func 5 10))


;Вариант1.
;	Получить список студентов отличников, т. е. студентов у которых по всем дисциплинам стоят оценки 5.

(	
	defvar students
		`(
			(Иванов (Математика 5) (Информатика 4))
			(Сидоров (Математика 3) (Информатика 5))
			(Сафонов (Математика 5) (Информатика 5))
			(Попов (Математика 2) (Информатика 3))
			(Петров (Математика 4) (Информатика 3))
			(Игнатьев (Математика 3) (Информатика 3))
			(Хамюк (Математика 5) (Информатика 5))
			(Щербина (Математика 3) (Информатика 4))
			(Легасов (Математика 5) (Информатика 4))
			(Игнатенко (Математика 5) (Информатика 3))
			(Совельев (Математика 3) (Информатика 2))
		)
)


(
	defun all-five(item)
	(
		if
		(null item)
		'end
		(
			
			let
			(
				(el (car item))
				(other (cdr item))
			)
			
			
			(
				let
				(
					(surname (first el))
					(learns (cdr el))
				)

				(
					let 
					(
						(first_learn  (car (cdar learns))) 
						(second_learn (cadar (cdr learns)))
					)

					(
						cond 
						(
							(= 10 (+ first_learn second_learn))
							(format t "~a~%" surname)

						)
					)				
				)
			)
			(all-five other)
		)
	)
)


(
	defun print_info (item)
	(
		dolist (data item)
			(format t "Имя - ~a~%" (car data))
			(
				dolist (tmp (cdr data))
					(format t "		Дисциплина: ~a		Оценка: ~a~%" (car tmp)  (cadr tmp))
			)
			(format t "~%")
	)
)

(print_info students)
(all-five students)



;Вариант2.
;	Для каждого студента вычислить средний балл за сессию.
(
	defun middle-point(item)
	(
		if
		(null item)
		'end
		(
			
			let
			(
				(el (car item))
				(other (cdr item))
			)
			
			(
				let
				(
					(surname (first el))
					(learns (cdr el))
				)

				(
					let 
					(
						(first_learn  (car (cdar learns))) 
						(second_learn (cadar (cdr learns)))
					)
						(format t "  ~a Средний балл: ~a~%" surname (/ (* 1.0(+ first_learn second_learn)) 2))				
				)
			)
			(middle-point other)
		)
	)
)
(middle-point students)

;Вариант3.
;	Определить дисциплину по которой у студентов возникает больше всего трудностей (наименьший суммарный балл).



;Вариант4.
;	Определить студентов должников, т.е. у которых оценки стоят не по всем дисциплинам.
(
	defun debtor(item)
	(
		if
		(null item)
		'end
		(
			
			let
			(
				(el (car item))
				(other (cdr item))
			)
			
			
			(
				let
				(
					(surname (first el))
					(learns (cdr el))
				)

				(
					let 
					(
						(first_learn  (car (cdar learns))) 
						(second_learn (cadar (cdr learns)))
					)
					
					(
						cond 
						(
							(>= 5 (+ first_learn second_learn))
							(format t "  ~a~%" surname)

						)
					)				
				)
			)
			(debtor other)
		)
	)
)
(debtor students)


;Вариант5.
;	Определить стоимость товаров в чеке с учетом скидки, которая указывает процент скидки данного товара.
(
	defvar product
	`(
		(product1 10.0 100 170.0)
		(product2 5.0 30 300.0)
		(product3 7.0 80 250.0)
		(product4 25.0 10 1000.0)
		(product5 2.0 500 100.0)
	)
)

(
	defun sale(item)
	(
		if
		(null item)
		`end
		(
			let
			(
				(el (car item))
				(other (cdr item))
			)
			
			(
				let
				(
					(name (first el))
					(discount (second el))
					(price (car (reverse el)))
				)

				(format t "Продукт: ~a  Цена: ~a  Скидка: ~a  Цена со скидкой: ~a~%" name price discount (- price (* price(/ discount 100))))
			)
			(sale other)
		)
	)
)
(sale product)


;Вариант6.
;	Определить стоимость товаров в чеке с учетом скидки, которая указывает следующее: 
;		0 — стоимость вычисляется цена*количество, 
;		2 — каждый второй товар данного наименования продается бесплатно.




;Вариант7.
;	Объединить позиции с одинаковым наименованием товаров, количество просуммировать, 
;	информацию о скидке и цене взять из первой позиции данного наименования. Таким образом сформировать новый список чека.
